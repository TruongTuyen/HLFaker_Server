#define LOG_TAG "SecurityData"

#include <jni.h>
#include <iostream>
#include <fstream>
//#include <sys/_system_properties.h>
#include <sys/system_properties.h>
#include <android/log.h>
#define LOGE(...) do { __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__); } while(0)
using namespace std;

static const char sPubKey[392] = {0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67,
                                  0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42,
                                  0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51,
                                  0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43,
                                  0x41, 0x51, 0x45, 0x41, 0x71, 0x39, 0x59, 0x37, 0x4c, 0x64,
                                  0x46, 0x35, 0x6a, 0x52, 0x79, 0x67, 0x4f, 0x5a, 0x73, 0x46,
                                  0x63, 0x75, 0x2f, 0x42, 0x52, 0x52, 0x6b, 0x79, 0x74, 0x47,
                                  0x51, 0x75, 0x6c, 0x6e, 0x71, 0x74, 0x4d, 0x46, 0x59, 0x45,
                                  0x34, 0x57, 0x47, 0x4f, 0x48, 0x6c, 0x53, 0x6d, 0x2f, 0x4b,
                                  0x4a, 0x62, 0x76, 0x68, 0x4f, 0x67, 0x4a, 0x44, 0x4e, 0x34,
                                  0x68, 0x70, 0x71, 0x6a, 0x37, 0x57, 0x50, 0x31, 0x4a, 0x59,
                                  0x33, 0x76, 0x4d, 0x2f, 0x45, 0x50, 0x6c, 0x5a, 0x4f, 0x38,
                                  0x76, 0x4e, 0x50, 0x64, 0x49, 0x30, 0x49, 0x6d, 0x37, 0x47,
                                  0x2b, 0x43, 0x76, 0x71, 0x39, 0x68, 0x45, 0x44, 0x4e, 0x4c,
                                  0x47, 0x4e, 0x35, 0x67, 0x44, 0x2f, 0x31, 0x48, 0x4b, 0x6f,
                                  0x4f, 0x46, 0x6f, 0x43, 0x46, 0x53, 0x69, 0x45, 0x37, 0x43,
                                  0x65, 0x59, 0x47, 0x41, 0x6e, 0x68, 0x35, 0x69, 0x33, 0x65,
                                  0x6e, 0x70, 0x69, 0x6b, 0x44, 0x42, 0x72, 0x6e, 0x4e, 0x63,
                                  0x66, 0x47, 0x67, 0x50, 0x31, 0x6b, 0x44, 0x67, 0x4d, 0x76,
                                  0x6d, 0x32, 0x6e, 0x71, 0x2b, 0x44, 0x36, 0x6d, 0x6c, 0x2b,
                                  0x30, 0x54, 0x32, 0x73, 0x5a, 0x73, 0x6d, 0x4c, 0x75, 0x4f,
                                  0x39, 0x4f, 0x42, 0x42, 0x4c, 0x34, 0x32, 0x43, 0x6e, 0x30,
                                  0x33, 0x76, 0x58, 0x6d, 0x61, 0x68, 0x63, 0x4b, 0x56, 0x41,
                                  0x68, 0x68, 0x2f, 0x67, 0x68, 0x45, 0x61, 0x59, 0x4e, 0x6d,
                                  0x50, 0x68, 0x67, 0x4a, 0x76, 0x44, 0x4c, 0x7a, 0x30, 0x4f,
                                  0x79, 0x56, 0x66, 0x4a, 0x51, 0x53, 0x35, 0x6c, 0x34, 0x4c,
                                  0x7a, 0x4e, 0x50, 0x35, 0x45, 0x35, 0x72, 0x6e, 0x38, 0x48,
                                  0x48, 0x73, 0x6f, 0x65, 0x79, 0x36, 0x71, 0x30, 0x71, 0x37,
                                  0x51, 0x36, 0x63, 0x43, 0x59, 0x77, 0x4b, 0x35, 0x4b, 0x6b,
                                  0x4e, 0x64, 0x35, 0x49, 0x50, 0x70, 0x36, 0x34, 0x6c, 0x4a,
                                  0x4e, 0x53, 0x66, 0x5a, 0x61, 0x66, 0x34, 0x49, 0x44, 0x74,
                                  0x36, 0x74, 0x37, 0x37, 0x4d, 0x54, 0x55, 0x42, 0x59, 0x79,
                                  0x43, 0x79, 0x72, 0x4c, 0x51, 0x2b, 0x37, 0x42, 0x6d, 0x78,
                                  0x46, 0x73, 0x4b, 0x45, 0x49, 0x63, 0x7a, 0x30, 0x64, 0x50,
                                  0x64, 0x79, 0x58, 0x32, 0x37, 0x34, 0x63, 0x4f, 0x67, 0x35,
                                  0x50, 0x58, 0x5a, 0x62, 0x66, 0x54, 0x33, 0x69, 0x54, 0x4c,
                                  0x6e, 0x4a, 0x51, 0x75, 0x4a, 0x32, 0x6a, 0x49, 0x32, 0x58,
                                  0x48, 0x44, 0x64, 0x34, 0x4f, 0x64, 0x35, 0x4c, 0x6b, 0x55,
                                  0x39, 0x45, 0x6d, 0x4a, 0x7a, 0x51, 0x49, 0x44, 0x41, 0x51,
                                  0x41, 0x42};

static const char cPriKey[1588] = {0x4d, 0x49, 0x49, 0x45, 0x6f, 0x67, 0x49, 0x42, 0x41, 0x41,
                                   0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x67, 0x69, 0x74, 0x6e,
                                   0x34, 0x58, 0x6e, 0x72, 0x56, 0x41, 0x38, 0x61, 0x47, 0x52,
                                   0x45, 0x76, 0x71, 0x32, 0x6b, 0x38, 0x51, 0x72, 0x61, 0x6a,
                                   0x35, 0x53, 0x50, 0x4a, 0x5a, 0x77, 0x43, 0x64, 0x73, 0x31,
                                   0x47, 0x51, 0x39, 0x56, 0x6e, 0x35, 0x7a, 0x2f, 0x56, 0x52,
                                   0x67, 0x6c, 0x51, 0x53, 0x73, 0x41, 0x36, 0x48, 0x37, 0x53,
                                   0x76, 0x47, 0x44, 0x73, 0x51, 0x72, 0x53, 0x55, 0x4b, 0x44,
                                   0x69, 0x35, 0x59, 0x4f, 0x6e, 0x41, 0x55, 0x6e, 0x30, 0x61,
                                   0x31, 0x70, 0x53, 0x68, 0x7a, 0x63, 0x37, 0x55, 0x34, 0x53,
                                   0x54, 0x49, 0x67, 0x2b, 0x4c, 0x4a, 0x6e, 0x61, 0x33, 0x34,
                                   0x38, 0x54, 0x44, 0x37, 0x55, 0x34, 0x2f, 0x37, 0x58, 0x67,
                                   0x31, 0x61, 0x50, 0x67, 0x4c, 0x7a, 0x6f, 0x67, 0x6a, 0x51,
                                   0x6e, 0x58, 0x66, 0x34, 0x64, 0x71, 0x7a, 0x41, 0x78, 0x58,
                                   0x54, 0x65, 0x6b, 0x53, 0x75, 0x6b, 0x6e, 0x71, 0x67, 0x67,
                                   0x4c, 0x36, 0x54, 0x63, 0x50, 0x42, 0x68, 0x49, 0x48, 0x37,
                                   0x2b, 0x6b, 0x6e, 0x59, 0x31, 0x4b, 0x31, 0x47, 0x58, 0x53,
                                   0x59, 0x66, 0x4a, 0x33, 0x68, 0x4d, 0x6d, 0x64, 0x4e, 0x4d,
                                   0x44, 0x35, 0x30, 0x68, 0x2b, 0x77, 0x66, 0x39, 0x77, 0x31,
                                   0x75, 0x33, 0x52, 0x75, 0x45, 0x70, 0x66, 0x5a, 0x64, 0x33,
                                   0x2f, 0x5a, 0x4d, 0x4d, 0x67, 0x76, 0x50, 0x67, 0x41, 0x63,
                                   0x5a, 0x79, 0x68, 0x54, 0x67, 0x75, 0x57, 0x78, 0x77, 0x31,
                                   0x7a, 0x75, 0x79, 0x57, 0x37, 0x2f, 0x68, 0x72, 0x62, 0x72,
                                   0x77, 0x6a, 0x75, 0x73, 0x4d, 0x56, 0x4d, 0x6f, 0x67, 0x51,
                                   0x72, 0x79, 0x33, 0x52, 0x32, 0x4f, 0x76, 0x4b, 0x73, 0x4f,
                                   0x33, 0x59, 0x43, 0x6e, 0x33, 0x7a, 0x32, 0x72, 0x42, 0x5a,
                                   0x53, 0x49, 0x51, 0x62, 0x6e, 0x39, 0x50, 0x35, 0x57, 0x77,
                                   0x4e, 0x77, 0x79, 0x35, 0x4f, 0x33, 0x57, 0x39, 0x7a, 0x6e,
                                   0x64, 0x49, 0x52, 0x43, 0x2b, 0x57, 0x49, 0x45, 0x4f, 0x73,
                                   0x4c, 0x39, 0x51, 0x41, 0x36, 0x37, 0x54, 0x2b, 0x4e, 0x79,
                                   0x4f, 0x42, 0x79, 0x4f, 0x64, 0x64, 0x34, 0x74, 0x6e, 0x73,
                                   0x44, 0x6c, 0x77, 0x67, 0x46, 0x2b, 0x41, 0x45, 0x73, 0x43,
                                   0x76, 0x56, 0x76, 0x75, 0x31, 0x4d, 0x44, 0x35, 0x4c, 0x44,
                                   0x43, 0x33, 0x54, 0x4c, 0x39, 0x64, 0x42, 0x63, 0x50, 0x67,
                                   0x6c, 0x33, 0x56, 0x43, 0x56, 0x72, 0x73, 0x4c, 0x4d, 0x70,
                                   0x2f, 0x56, 0x68, 0x67, 0x38, 0x56, 0x6f, 0x77, 0x49, 0x44,
                                   0x41, 0x51, 0x41, 0x42, 0x41, 0x6f, 0x49, 0x42, 0x41, 0x45,
                                   0x74, 0x62, 0x50, 0x59, 0x51, 0x32, 0x78, 0x4a, 0x6d, 0x68,
                                   0x4e, 0x49, 0x61, 0x57, 0x67, 0x48, 0x5a, 0x48, 0x4d, 0x65,
                                   0x2b, 0x64, 0x4e, 0x44, 0x79, 0x4f, 0x2f, 0x79, 0x56, 0x32,
                                   0x49, 0x64, 0x57, 0x52, 0x76, 0x73, 0x32, 0x4c, 0x44, 0x53,
                                   0x66, 0x71, 0x36, 0x51, 0x6a, 0x2b, 0x43, 0x75, 0x4f, 0x4a,
                                   0x52, 0x66, 0x39, 0x7a, 0x65, 0x2f, 0x46, 0x49, 0x64, 0x35,
                                   0x61, 0x74, 0x76, 0x75, 0x47, 0x73, 0x4f, 0x55, 0x44, 0x78,
                                   0x61, 0x78, 0x2f, 0x6a, 0x75, 0x44, 0x53, 0x44, 0x69, 0x52,
                                   0x4b, 0x49, 0x51, 0x2b, 0x65, 0x79, 0x5a, 0x2b, 0x77, 0x43,
                                   0x46, 0x63, 0x65, 0x65, 0x57, 0x48, 0x61, 0x62, 0x66, 0x79,
                                   0x66, 0x70, 0x37, 0x77, 0x4d, 0x2f, 0x48, 0x36, 0x57, 0x33,
                                   0x6a, 0x4f, 0x69, 0x5a, 0x62, 0x66, 0x77, 0x53, 0x4e, 0x53,
                                   0x31, 0x7a, 0x5a, 0x34, 0x64, 0x66, 0x43, 0x73, 0x78, 0x31,
                                   0x78, 0x69, 0x45, 0x47, 0x41, 0x45, 0x6e, 0x4d, 0x72, 0x64,
                                   0x63, 0x38, 0x4f, 0x4e, 0x65, 0x6f, 0x73, 0x4c, 0x4a, 0x4f,
                                   0x72, 0x5a, 0x46, 0x33, 0x5a, 0x45, 0x6e, 0x42, 0x52, 0x76,
                                   0x63, 0x32, 0x62, 0x36, 0x34, 0x4b, 0x56, 0x59, 0x57, 0x78,
                                   0x51, 0x79, 0x75, 0x59, 0x48, 0x61, 0x37, 0x56, 0x34, 0x79,
                                   0x45, 0x31, 0x68, 0x73, 0x4c, 0x61, 0x6c, 0x73, 0x75, 0x6d,
                                   0x74, 0x46, 0x31, 0x78, 0x46, 0x6b, 0x61, 0x6c, 0x4d, 0x76,
                                   0x4b, 0x78, 0x2b, 0x48, 0x77, 0x35, 0x43, 0x4a, 0x2f, 0x73,
                                   0x57, 0x58, 0x38, 0x76, 0x6b, 0x67, 0x66, 0x57, 0x43, 0x4e,
                                   0x71, 0x61, 0x51, 0x62, 0x62, 0x6b, 0x6d, 0x37, 0x41, 0x6b,
                                   0x76, 0x71, 0x78, 0x66, 0x33, 0x65, 0x48, 0x53, 0x37, 0x58,
                                   0x56, 0x41, 0x53, 0x56, 0x71, 0x65, 0x56, 0x59, 0x5a, 0x34,
                                   0x4e, 0x41, 0x2b, 0x42, 0x46, 0x75, 0x6f, 0x48, 0x62, 0x2f,
                                   0x54, 0x30, 0x56, 0x59, 0x35, 0x79, 0x42, 0x67, 0x5a, 0x63,
                                   0x35, 0x53, 0x4f, 0x34, 0x70, 0x4b, 0x66, 0x45, 0x35, 0x72,
                                   0x6b, 0x7a, 0x69, 0x41, 0x68, 0x6e, 0x4e, 0x33, 0x55, 0x4a,
                                   0x67, 0x67, 0x62, 0x65, 0x38, 0x34, 0x32, 0x72, 0x6b, 0x57,
                                   0x6b, 0x49, 0x61, 0x53, 0x58, 0x4c, 0x79, 0x6a, 0x58, 0x39,
                                   0x4f, 0x6c, 0x7a, 0x2b, 0x52, 0x43, 0x39, 0x74, 0x67, 0x73,
                                   0x4f, 0x77, 0x67, 0x45, 0x4c, 0x37, 0x7a, 0x56, 0x65, 0x4b,
                                   0x34, 0x31, 0x71, 0x35, 0x78, 0x66, 0x73, 0x37, 0x52, 0x51,
                                   0x45, 0x43, 0x67, 0x59, 0x45, 0x41, 0x76, 0x48, 0x65, 0x54,
                                   0x4b, 0x63, 0x78, 0x43, 0x78, 0x73, 0x68, 0x58, 0x57, 0x47,
                                   0x72, 0x30, 0x56, 0x4a, 0x76, 0x58, 0x64, 0x41, 0x6c, 0x78,
                                   0x72, 0x50, 0x38, 0x55, 0x32, 0x67, 0x50, 0x4d, 0x55, 0x6c,
                                   0x53, 0x44, 0x63, 0x49, 0x4a, 0x69, 0x2b, 0x74, 0x49, 0x65,
                                   0x73, 0x35, 0x47, 0x36, 0x65, 0x73, 0x75, 0x48, 0x33, 0x46,
                                   0x30, 0x56, 0x56, 0x52, 0x6d, 0x33, 0x58, 0x36, 0x6e, 0x4a,
                                   0x37, 0x69, 0x76, 0x37, 0x77, 0x64, 0x2b, 0x45, 0x70, 0x58,
                                   0x4e, 0x59, 0x4e, 0x32, 0x52, 0x44, 0x6a, 0x4c, 0x7a, 0x64,
                                   0x47, 0x49, 0x51, 0x53, 0x49, 0x42, 0x4c, 0x6e, 0x52, 0x70,
                                   0x4f, 0x64, 0x32, 0x42, 0x6e, 0x41, 0x39, 0x72, 0x62, 0x45,
                                   0x6f, 0x73, 0x63, 0x30, 0x4c, 0x65, 0x2f, 0x41, 0x6f, 0x33,
                                   0x4f, 0x4c, 0x5a, 0x69, 0x2f, 0x69, 0x48, 0x4b, 0x69, 0x58,
                                   0x4a, 0x73, 0x68, 0x53, 0x4c, 0x6d, 0x78, 0x4c, 0x79, 0x43,
                                   0x52, 0x48, 0x69, 0x6c, 0x4f, 0x49, 0x65, 0x4d, 0x76, 0x6f,
                                   0x6c, 0x2b, 0x4b, 0x64, 0x6b, 0x35, 0x34, 0x72, 0x71, 0x72,
                                   0x68, 0x46, 0x4f, 0x47, 0x68, 0x30, 0x50, 0x4d, 0x55, 0x61,
                                   0x61, 0x6a, 0x68, 0x7a, 0x33, 0x79, 0x45, 0x43, 0x67, 0x59,
                                   0x45, 0x41, 0x73, 0x4e, 0x41, 0x58, 0x31, 0x7a, 0x49, 0x5a,
                                   0x65, 0x55, 0x41, 0x77, 0x78, 0x43, 0x65, 0x30, 0x48, 0x44,
                                   0x79, 0x47, 0x4d, 0x67, 0x57, 0x45, 0x2b, 0x6b, 0x4f, 0x6a,
                                   0x59, 0x74, 0x7a, 0x46, 0x64, 0x6d, 0x57, 0x58, 0x57, 0x65,
                                   0x73, 0x69, 0x63, 0x2f, 0x59, 0x77, 0x41, 0x7a, 0x53, 0x71,
                                   0x64, 0x52, 0x6b, 0x50, 0x53, 0x69, 0x58, 0x58, 0x36, 0x4f,
                                   0x72, 0x73, 0x39, 0x4f, 0x4b, 0x62, 0x44, 0x79, 0x47, 0x45,
                                   0x37, 0x52, 0x4d, 0x53, 0x63, 0x77, 0x4b, 0x5a, 0x41, 0x74,
                                   0x56, 0x35, 0x38, 0x35, 0x69, 0x2b, 0x65, 0x4a, 0x65, 0x66,
                                   0x70, 0x50, 0x64, 0x64, 0x35, 0x70, 0x6f, 0x55, 0x79, 0x48,
                                   0x6a, 0x69, 0x73, 0x68, 0x2b, 0x55, 0x4c, 0x42, 0x6d, 0x37,
                                   0x41, 0x74, 0x6c, 0x48, 0x58, 0x75, 0x76, 0x36, 0x4f, 0x76,
                                   0x4c, 0x67, 0x50, 0x76, 0x4d, 0x77, 0x42, 0x4b, 0x2b, 0x76,
                                   0x4a, 0x37, 0x57, 0x34, 0x34, 0x4e, 0x64, 0x6b, 0x71, 0x53,
                                   0x66, 0x41, 0x73, 0x4d, 0x66, 0x35, 0x46, 0x6f, 0x7a, 0x70,
                                   0x48, 0x72, 0x59, 0x2f, 0x6b, 0x31, 0x35, 0x64, 0x4d, 0x4e,
                                   0x72, 0x51, 0x74, 0x4b, 0x51, 0x34, 0x35, 0x64, 0x53, 0x31,
                                   0x73, 0x45, 0x4d, 0x43, 0x67, 0x59, 0x42, 0x37, 0x54, 0x6b,
                                   0x69, 0x4d, 0x61, 0x6b, 0x57, 0x75, 0x52, 0x4e, 0x6c, 0x51,
                                   0x30, 0x66, 0x6b, 0x31, 0x65, 0x68, 0x6a, 0x47, 0x70, 0x48,
                                   0x38, 0x70, 0x54, 0x6d, 0x4c, 0x59, 0x47, 0x50, 0x41, 0x50,
                                   0x56, 0x5a, 0x67, 0x42, 0x66, 0x6d, 0x30, 0x2f, 0x36, 0x55,
                                   0x57, 0x49, 0x2b, 0x75, 0x6c, 0x6b, 0x2b, 0x64, 0x44, 0x54,
                                   0x7a, 0x6c, 0x72, 0x73, 0x71, 0x4c, 0x79, 0x65, 0x37, 0x44,
                                   0x6c, 0x66, 0x69, 0x49, 0x74, 0x59, 0x31, 0x75, 0x4b, 0x30,
                                   0x56, 0x50, 0x6a, 0x38, 0x6c, 0x4b, 0x37, 0x56, 0x58, 0x36,
                                   0x50, 0x51, 0x4c, 0x47, 0x69, 0x6e, 0x62, 0x33, 0x61, 0x39,
                                   0x61, 0x45, 0x73, 0x33, 0x58, 0x66, 0x49, 0x76, 0x2b, 0x48,
                                   0x68, 0x43, 0x66, 0x38, 0x36, 0x56, 0x31, 0x32, 0x7a, 0x55,
                                   0x41, 0x2f, 0x37, 0x4b, 0x52, 0x72, 0x33, 0x4c, 0x50, 0x6b,
                                   0x70, 0x57, 0x5a, 0x32, 0x33, 0x4e, 0x54, 0x62, 0x46, 0x76,
                                   0x4b, 0x72, 0x31, 0x62, 0x74, 0x54, 0x64, 0x75, 0x77, 0x51,
                                   0x70, 0x57, 0x68, 0x54, 0x2f, 0x50, 0x6d, 0x77, 0x61, 0x36,
                                   0x31, 0x59, 0x45, 0x45, 0x58, 0x4f, 0x4c, 0x66, 0x39, 0x35,
                                   0x31, 0x47, 0x72, 0x64, 0x53, 0x78, 0x77, 0x51, 0x4b, 0x42,
                                   0x67, 0x44, 0x69, 0x6c, 0x34, 0x77, 0x32, 0x43, 0x4d, 0x71,
                                   0x45, 0x6a, 0x54, 0x4c, 0x78, 0x37, 0x7a, 0x2f, 0x75, 0x2f,
                                   0x39, 0x47, 0x71, 0x77, 0x56, 0x41, 0x4e, 0x75, 0x69, 0x6a,
                                   0x6c, 0x52, 0x62, 0x44, 0x35, 0x62, 0x6e, 0x42, 0x73, 0x6c,
                                   0x39, 0x33, 0x72, 0x5a, 0x70, 0x46, 0x5a, 0x53, 0x6d, 0x45,
                                   0x34, 0x2b, 0x41, 0x69, 0x55, 0x4b, 0x62, 0x4e, 0x74, 0x6c,
                                   0x38, 0x52, 0x63, 0x67, 0x52, 0x76, 0x65, 0x5a, 0x45, 0x4b,
                                   0x4a, 0x34, 0x47, 0x74, 0x41, 0x59, 0x51, 0x2f, 0x65, 0x68,
                                   0x64, 0x35, 0x6e, 0x78, 0x46, 0x51, 0x31, 0x44, 0x33, 0x74,
                                   0x55, 0x57, 0x6e, 0x39, 0x49, 0x54, 0x43, 0x5a, 0x65, 0x56,
                                   0x43, 0x32, 0x52, 0x77, 0x4d, 0x36, 0x50, 0x52, 0x64, 0x70,
                                   0x59, 0x61, 0x45, 0x51, 0x43, 0x37, 0x63, 0x41, 0x64, 0x55,
                                   0x36, 0x7a, 0x32, 0x66, 0x34, 0x6f, 0x47, 0x4e, 0x32, 0x2f,
                                   0x74, 0x49, 0x41, 0x48, 0x79, 0x67, 0x35, 0x64, 0x4a, 0x41,
                                   0x4e, 0x7a, 0x38, 0x73, 0x51, 0x6f, 0x54, 0x55, 0x44, 0x70,
                                   0x68, 0x56, 0x59, 0x5a, 0x63, 0x51, 0x67, 0x36, 0x44, 0x30,
                                   0x61, 0x69, 0x75, 0x46, 0x39, 0x65, 0x6a, 0x45, 0x74, 0x70,
                                   0x56, 0x4c, 0x41, 0x6f, 0x47, 0x41, 0x41, 0x71, 0x75, 0x4d,
                                   0x58, 0x37, 0x78, 0x35, 0x37, 0x4e, 0x69, 0x69, 0x2b, 0x51,
                                   0x39, 0x37, 0x54, 0x76, 0x79, 0x38, 0x55, 0x50, 0x76, 0x43,
                                   0x39, 0x54, 0x68, 0x73, 0x48, 0x2f, 0x32, 0x58, 0x2f, 0x52,
                                   0x56, 0x70, 0x39, 0x6f, 0x6d, 0x73, 0x54, 0x4e, 0x42, 0x4e,
                                   0x32, 0x41, 0x4f, 0x6d, 0x51, 0x63, 0x5a, 0x76, 0x63, 0x68,
                                   0x35, 0x6b, 0x50, 0x56, 0x49, 0x52, 0x58, 0x44, 0x62, 0x36,
                                   0x44, 0x58, 0x66, 0x53, 0x65, 0x46, 0x51, 0x46, 0x41, 0x41,
                                   0x4c, 0x58, 0x58, 0x31, 0x55, 0x32, 0x47, 0x59, 0x5a, 0x69,
                                   0x6a, 0x4e, 0x61, 0x67, 0x33, 0x37, 0x66, 0x54, 0x50, 0x63,
                                   0x4a, 0x67, 0x43, 0x39, 0x6b, 0x69, 0x45, 0x76, 0x6d, 0x52,
                                   0x4d, 0x30, 0x4c, 0x38, 0x2b, 0x6b, 0x39, 0x50, 0x47, 0x50,
                                   0x4a, 0x57, 0x56, 0x54, 0x58, 0x50, 0x4c, 0x54, 0x36, 0x69,
                                   0x6f, 0x38, 0x7a, 0x6c, 0x35, 0x6b, 0x35, 0x4a, 0x55, 0x58,
                                   0x73, 0x50, 0x62, 0x4d, 0x70, 0x4e, 0x51, 0x46, 0x59, 0x36,
                                   0x35, 0x34, 0x31, 0x69, 0x4a, 0x69, 0x42, 0x65, 0x31, 0x2f,
                                   0x54, 0x4e, 0x4a, 0x4a, 0x33, 0x7a, 0x6b, 0x79, 0x67, 0x30,
                                   0x52, 0x77, 0x2f, 0x61, 0x56, 0x56, 0x73, 0x3d};


/**
 * Convert JString to C++ String
 * @param env
 * @param jStr
 * @return
 */
static string jstring2string(JNIEnv *env, jstring jStr) {
    if (!jStr)
        return "";

    const jclass stringClass = env->GetObjectClass(jStr);
    const jmethodID getBytes = env->GetMethodID(stringClass, "getBytes", "(Ljava/lang/String;)[B");
    const jbyteArray stringJbytes = (jbyteArray) env->CallObjectMethod(jStr, getBytes, env->NewStringUTF("UTF-8"));

    size_t length = (size_t) env->GetArrayLength(stringJbytes);
    jbyte* pBytes = env->GetByteArrayElements(stringJbytes, NULL);

    string ret = string((char *)pBytes, length);
    env->ReleaseByteArrayElements(stringJbytes, pBytes, JNI_ABORT);

    env->DeleteLocalRef(stringJbytes);
    env->DeleteLocalRef(stringClass);
    return ret;
}

/**
 * Convert C++ String to JString
 * @param env
 * @param cString
 * @return
 */
static jstring string2jstring(JNIEnv *env , string cString){
    const jclass strClass = env->FindClass("java/lang/String");
    const jmethodID constctorID = env->GetMethodID(strClass, "<init>", "([BLjava/lang/String;)V");
    const jstring encoding = env->NewStringUTF("GBK");

    jbyteArray bytes = env->NewByteArray(cString.length());
    env->SetByteArrayRegion(bytes, 0, cString.length(), (jbyte*)cString.c_str());
    jstring str = (jstring)env->NewObject(strClass, constctorID, bytes, encoding);
    return str;
}

static string getCID(){

    try {
        ifstream cidfile("/sys/class/block/mmcblk0/device/cid");
        char temp[255];
        string cid;
        if(cidfile){
            cidfile.getline(temp, 255);
            cid = temp;
            cidfile.close();
            return cid;
        }else{
            cidfile.close();
            return "null";
        }
    }catch(exception& e) {
        return "error";
    }
}

static string getMAC(){
    try {
        ifstream addressfile("/sys/class/net/wlan0/address");
        char temp[255];
        string mac;
        if(addressfile){
            addressfile.getline(temp, 255);
            mac = temp;
            addressfile.close();
            return mac;
        }else{
            addressfile.close();
            return "null";
        }
    }catch(exception& e) {
        return "error";
    }
}

static jstring getSPubKey(JNIEnv *env){
    try {
        string pubKey(sPubKey);
        return string2jstring(env, pubKey);
    }catch(exception& e) {
        return string2jstring(env, "null");
    }
}

static jstring getCPriKey(JNIEnv *env){
    try {
        string priKey(cPriKey);
        return string2jstring(env, priKey);
    }catch(exception& e) {
        return string2jstring(env, "null");
    }
}

static jstring getSerial(JNIEnv *env, jobject clazz)
{
    try {

        string cid = getCID();
        string mac = getMAC();
        return string2jstring(env, cid + "." + mac);
        //string serialno = getSerialno();
        //return string2jstring(env, serialno);
        /*
        if((cid.find("null") != string::npos) || (cid.find("error") != string::npos) ||
                (mac.find("null") != string::npos) || (mac.find("error") != string::npos)){
            return string2jstring(env, "fuck");
        } else{
            return string2jstring(env, cid + "." + mac);
        }
         */
        /*
        jclass build_class = env->FindClass("android/os/Build");
        jfieldID serial_field = env->GetStaticFieldID(build_class, "SERIAL", "Ljava/lang/String;");
        const jstring serial_id = (jstring)env->GetStaticObjectField(build_class, serial_field);

        return serial_id;
        */
    }catch(exception& e) {
        return string2jstring(env, "null");
    }

}

static const char *classPathName = "com/hl46000/hlfaker/remote/HLController";

static JNINativeMethod method_table[] = {
        { "getSerial", "()Ljava/lang/String;", (void*) getSerial},
        { "getSPubKey", "()Ljava/lang/String;", (void*) getSPubKey},
        { "getCPriKey", "()Ljava/lang/String;", (void*) getCPriKey}
};

/*
 * Register several native methods for one class.
 */
static int registerNativeMethods(JNIEnv* env, const char* className,
                                 JNINativeMethod* gMethods, int numMethods)
{
    jclass clazz;

    clazz = env->FindClass(className);
    if (clazz == NULL) {
        LOGE("Native registration unable to find class '%s'", className);
        return JNI_FALSE;
    }
    if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
        LOGE("RegisterNatives failed for '%s'", className);
        return JNI_FALSE;
    }

    return JNI_TRUE;
}

/*
 * Register native methods for all classes we know about.
 *
 * returns JNI_TRUE on success.
 */
static int registerNatives(JNIEnv* env)
{
    if (!registerNativeMethods(env, classPathName, method_table,
                               sizeof(method_table) / sizeof(method_table[0]))) {
        return JNI_FALSE;
    }

    return JNI_TRUE;
}


// ----------------------------------------------------------------------------

/*
 * This is called by the VM when the shared library is first loaded.
 */

typedef union {
    JNIEnv* env;
    void* venv;
} UnionJNIEnvToVoid;

jint JNI_OnLoad(JavaVM* vm, void* reserved) {
    UnionJNIEnvToVoid uenv;
    uenv.venv = NULL;
    jint result = -1;
    JNIEnv* env = NULL;

    if (vm->GetEnv(&uenv.venv, JNI_VERSION_1_4) != JNI_OK) {
        LOGE("ERROR: GetEnv failed");
        goto bail;
    }
    env = uenv.env;

    if (registerNatives(env) != JNI_TRUE) {
        LOGE("ERROR: registerNatives failed");
        goto bail;
    }

    result = JNI_VERSION_1_4;
    bail:
    return result;
}